#!/bin/bash

################################################################################
# Porraza Backend - Deployment Verification Script
# Verifica que el deployment est√© funcionando correctamente
# Ejecutar como usuario 'porraza' desde ~/porraza-backend
################################################################################

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo ""
echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}   üîç Verificaci√≥n de Deployment${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""

# Check if Docker is accessible
if ! docker ps &> /dev/null; then
    echo -e "${RED}‚ùå No se puede acceder a Docker${NC}"
    echo -e "${YELLOW}üí° Verifica que el usuario est√© en el grupo 'docker'${NC}"
    exit 1
fi

# Check if in correct directory
if [ ! -f "docker-compose.yml" ]; then
    echo -e "${RED}‚ùå No se encuentra docker-compose.yml${NC}"
    echo -e "${YELLOW}üí° Ejecuta este script desde ~/porraza-backend${NC}"
    exit 1
fi

# 1. Container Status
echo -e "${CYAN}üì¶ Estado de Contenedores:${NC}"
echo ""
docker compose ps
echo ""

# 2. Check if backend is running
if docker compose ps | grep -q "porraza_backend.*Up"; then
    echo -e "${GREEN}‚úÖ Backend container est√° corriendo${NC}"
else
    echo -e "${RED}‚ùå Backend container NO est√° corriendo${NC}"
    echo ""
    echo -e "${YELLOW}Ver logs con: docker compose logs backend${NC}"
    exit 1
fi

# 3. Check if PostgreSQL is running
if docker compose ps | grep -q "porraza_postgres.*Up"; then
    echo -e "${GREEN}‚úÖ PostgreSQL container est√° corriendo${NC}"
else
    echo -e "${RED}‚ùå PostgreSQL container NO est√° corriendo${NC}"
    exit 1
fi

echo ""

# 4. Check backend health
echo -e "${CYAN}üè• Health Check del Backend:${NC}"

HEALTHY=false
for i in {1..10}; do
    if docker compose ps | grep -q "porraza_backend.*healthy"; then
        HEALTHY=true
        break
    fi
    sleep 1
done

if [ "$HEALTHY" = true ]; then
    echo -e "${GREEN}‚úÖ Backend est√° healthy${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Backend est√° corriendo pero no est√° 'healthy' todav√≠a${NC}"
    echo -e "${YELLOW}   Esto puede ser normal si el container acaba de iniciar${NC}"
fi

echo ""

# 5. Test HTTP endpoint
echo -e "${CYAN}üåê Probando endpoints HTTP:${NC}"

# Test localhost
if curl -s -o /dev/null -w "%{http_code}" http://localhost:3001 | grep -q "200"; then
    echo -e "${GREEN}‚úÖ http://localhost:3001 responde (200 OK)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  http://localhost:3001 no responde correctamente${NC}"
fi

# Get server IP
SERVER_IP=$(hostname -I | awk '{print $1}')

# Test external IP
if curl -s -o /dev/null -w "%{http_code}" http://${SERVER_IP}:3001 --max-time 5 | grep -q "200"; then
    echo -e "${GREEN}‚úÖ http://${SERVER_IP}:3001 responde (200 OK)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  http://${SERVER_IP}:3001 no responde${NC}"
    echo -e "${YELLOW}   Verifica el firewall: sudo ufw allow 3001/tcp${NC}"
fi

echo ""

# 6. Database connection
echo -e "${CYAN}üóÑÔ∏è  Verificando conexi√≥n a PostgreSQL:${NC}"

if docker exec porraza_postgres pg_isready -U root &> /dev/null; then
    echo -e "${GREEN}‚úÖ PostgreSQL est√° aceptando conexiones${NC}"
else
    echo -e "${RED}‚ùå PostgreSQL NO est√° respondiendo${NC}"
fi

echo ""

# 7. Show recent logs
echo -e "${CYAN}üìã √öltimos logs del backend:${NC}"
echo -e "${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
docker compose logs --tail=20 backend
echo -e "${BLUE}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"

echo ""

# 8. Resource usage
echo -e "${CYAN}üíª Uso de recursos:${NC}"
docker stats --no-stream porraza_backend porraza_postgres

echo ""

# 9. Network info
echo -e "${CYAN}üåç Informaci√≥n de red:${NC}"
echo "  ‚Ä¢ IP del servidor: ${SERVER_IP}"
echo "  ‚Ä¢ Puerto backend:  3001"
echo ""
echo "  ‚Ä¢ API Base:        http://${SERVER_IP}:3001"
echo "  ‚Ä¢ Swagger Docs:    http://${SERVER_IP}:3001/api"

echo ""

# 10. Summary
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}   ‚úÖ VERIFICACI√ìN COMPLETADA${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""

echo -e "${BLUE}üìù Comandos √∫tiles:${NC}"
echo "  ‚Ä¢ Ver logs:              docker compose logs -f backend"
echo "  ‚Ä¢ Reiniciar backend:     docker compose restart backend"
echo "  ‚Ä¢ Ver estado:            docker compose ps"
echo "  ‚Ä¢ Detener todo:          docker compose down"
echo "  ‚Ä¢ Ver uso de recursos:   docker stats"
echo ""

# Check if firewall might be blocking
if command -v ufw &> /dev/null; then
    UFW_STATUS=$(sudo ufw status 2>/dev/null | grep "3001" || echo "not found")
    if echo "$UFW_STATUS" | grep -q "ALLOW"; then
        echo -e "${GREEN}‚úÖ Firewall: Puerto 3001 est√° abierto${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Firewall: Puerto 3001 podr√≠a estar bloqueado${NC}"
        echo -e "${YELLOW}   Ejecuta: sudo ufw allow 3001/tcp${NC}"
    fi
fi

echo ""
