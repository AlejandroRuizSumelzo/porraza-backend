version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:18-alpine
    container_name: porraza_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-porraza_db}
      POSTGRES_USER: ${DB_USER:-root}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-root}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
      TZ: Europe/Madrid
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - porraza_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-root} -d ${DB_NAME:-porraza_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: porraza_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: ${PORT:-3001}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-porraza_db}
      DB_USER: ${DB_USER:-root}
      DB_PASSWORD: ${DB_PASSWORD:-root}
    ports:
      - "${PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - porraza_network
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3001', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); });\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (optional but recommended for production)
  nginx:
    image: nginx:alpine
    container_name: porraza_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - porraza_network
    profiles:
      - with-nginx

volumes:
  postgres_data:
    driver: local

networks:
  porraza_network:
    driver: bridge
